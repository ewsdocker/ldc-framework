#!/binbash
# ******************************************************************************
# ******************************************************************************
#
#  	ldcCom.lib
#		Provides access to command-line using a
#		common (COM) communication bridge.
#
# *****************************************************************************
#
# @author Jay Wheeler.
# @version 0.0.1
# @copyright © 2021. EarthWalk Software.
# @license Licensed under the GNU General Public License, GPL-3.0-or-later.
# @package ewsdocker/ldc-library
# @subpackage ldcCom
#
# *****************************************************************************
#
#	Copyright © 2021. EarthWalk Software
#	Licensed under the GNU General Public License, GPL-3.0-or-later.
#
#   This file is part of ewsdocker/ldc-library.
#
#   ewsdocker/ldc-library is free software: you can redistribute 
#   it and/or modify it under the terms of the GNU General Public License 
#   as published by the Free Software Foundation, either version 3 of the 
#   License, or (at your option) any later version.
#
#   ewsdocker/ldc-library is distributed in the hope that it will 
#   be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
#   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ewsdocker/ldc-library.  If not, see 
#   <http://www.gnu.org/licenses/>.
#
# *****************************************************************************
#
#	Version 0.0.1 - 04-17-2021.
#
# ******************************************************************************
#
#	Dependencies
#
#		
#
# *****************************************************************************
#
#	Functions:
#
#		ldcComFile
#			Set the name of the file to process 
#
#		ldcComInit
#			initialize query vars and set the file to query
#
#		ldcComOptions
#			Set the command options, if any. 
#				This is persistent... it will last until changed 
#
#		ldcComQuery
#			execute a query and set the query result value
#
#		ldcComReset
#			reset query vars
#
# ******************************************************************************
# ******************************************************************************

declare -r ldclib_ldcCom="0.0.1"				# version of ldcJq

# ******************************************************************************
#
#	Global declarations
#
# ******************************************************************************

declare    ldccom_Path="."						# Path to the json file directory
declare    ldccom_FileName=""					# name of the json file to query
declare -i ldccom_FileExists=0					# true if the json file exists

declare    ldccom_Query=""						# the current (or last executed) query
declare    ldccom_QueryResult=""					# the result of the last executed query

declare    ldccom_QueryOpts=""					# list of query options

declare    ldccom_Factory="COM"					# COM factory name

declare -i ldccom_Initialized=false				# true if initialized (first time)
declare    ldccom_Result=0						# status returned from Jq function call

# ******************************************************************************
# ******************************************************************************
#
#						Descriptors
#
# ******************************************************************************
# ******************************************************************************
#
#	InitializeDescriptor
#	FileDescriptor
#	
#	RequestDescriptor
#	ResponseDescriptor
#
#	ExitDescriptor
#
#
#	Descriptor Header
#		system session id
#
#		namespace
#
#		descriptor type
#		
#
#
#
#
# ******************************************************************************
# ******************************************************************************

# ******************************************************************************
# ******************************************************************************
#
#						Functions
#
# ******************************************************************************
# ******************************************************************************

# ******************************************************************************
#
#	ldcComInit
#
#		initialize query vars and set the file to query
#
#	parameters:
#		file = absolute path to the file to query
#		path = (optional) path to the com program
#
#	returns:
#		0 = no error
#		non-zero = error code
#
# ******************************************************************************
function ldcComInit()
{
	local lci_file="${1}"
	local lci_path=${2:-"."}

	ldccom_Result=0
	ldccom_Initialized=0

	ldcComReset

	ldccom_Path="${lci_path}"

    [[ -z "${lci_file}" ]] ||
	 {
		ldcComFile "${lci_file}"
		[[ $? -eq 0 ]] || return 1
	 }

	ldccom_Initialized=1
	return 0
}

# ******************************************************************************
#
#	ldcComReset
#
#		reset query vars
#
#	parameters:
#		none
#
#	returns:
#		0 => no error
#
# ******************************************************************************
function ldcComReset()
{
	set -o pipefail

	ldccom_Path="."
	ldccom_Query=""
	ldccom_QueryOpts=""

	ldccom_QueryResult=""

	ldccom_FileName=""
}

# ******************************************************************************
#
#	ldcComOptions
#
#		Set the command options, if any. 
#			This is persistent... it will last until changed 
#
#	parameters:
#		ldccom_QueryOpts = the command options, null ("") to clear.
#
#	returns:
#		0 => no error
#		1 => query error
#
# ******************************************************************************
function ldcComOptions()
{
	ldccom_QueryOpts="${1}"
	ldccom_Result=0

	return $ldccom_Result
}

# ******************************************************************************
#
#	ldcComFile
#
#		Set the name of the file to process 
#
#	parameters:
#		lci_file = the name of the file to process
#
#	returns:
#		0 => no error
#		1 => query error
#
# ******************************************************************************
function ldcComFile()
{
	local lcf_file="${1}"

	ldccom_FileExists=0
	ldccom_Result=1

	while [ true ]
	do
		[[ -z "${lcf_file}" ]] && break

		(( ldccom_Result++ ))

		[[ -e "${ldccom_Path}/${lcf_file}" ]] || break

		ldccom_FileExists=1
		ldccom_FileName=${lcf_file}

		ldccom_Result=0
		break

    done			

	return $ldccom_Result
}

# ******************************************************************************
#
#	ldcComQuery
#
#		execute a query and set the query result value
#
#	parameters:
#		jquery = jq query to execute
#       lcq_opts  = (optional) override global jq options values and use these instead
#								(only for this call)
#
#	returns:
#		0 = no error
#		non-zero = error code
#
# ******************************************************************************
function ldcComQuery()
{
	ldccom_Query=${1:-""}
	local lcq_opts=${2:-"$ldccom_QueryOpts"}

	ldccom_QueryResult=""
	ldccom_Result=1

	while [ true ]
	do
		[[ -z "${ldccom_Query}" ]] && break

    	(( ldccom_Result++ ))

		ldccom_QueryResult=$( ${ldccom_Jq} ${lcq_opts} '${ldccom_Query}' "${ldccom_Path}/${ldccom_QueryFile}" )
		[[ $? -eq 0 ]] || break

    	(( ldccom_Result++ ))

		[[ -z "${ldccom_QueryResult}" ]] && break

		ldccom_Result=0
		break
    done

	return $ldccom_Result
}

# ******************************************************************************
#
#	ldcComFactory
#
#		Register COM object name and short description
#
#	parameters:
#		comobject = COM handler name to add
#		comfunction = short description of the com object
#
#	returns:
#		0 = no error
#		non-zero = error code
#
# ******************************************************************************
function ldcComFactory()
{
	local lcf_comobj=${1:-""}
	local lcf_comfunction=${2:-"$lcf_comobj"}

	local lcf_error=1
	
	while [ true ]
	do
		[[ -z "$lcf_comobj" ]] && break

		(( lcf_error++ ))
			
		[[ ${ldcfac_initialized} -eq 0 ]] &&
		 {
			ldcFactoryInit
			[[ $? -eq 0 ]] || break
		 }

		(( lcf_error++ ))
			
		ldcFactory "$ldccom_Factory" "$lcf_comobj" "$lcf_comfunction" 1 1
		[[ $? -eq 0 ]] || break

		lcf_error=0
		break	
	done

	return $lcf_error	
}

# ******************************************************************************
# ******************************************************************************

