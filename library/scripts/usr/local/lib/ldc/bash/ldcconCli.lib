# =========================================================================================
# =========================================================================================
#
#	ldcconCli
#	  cli parsing library.
#
# =========================================================================================
#
# @author Jay Wheeler.
# @version 0.0.3
# @copyright © 2017-2020. EarthWalk Software.
# @license Licensed under the GNU General Public License, GPL-3.0-or-later.
# @package ewsdocker/ldc-library
# @subpackage ldcconCli
#
# =========================================================================
#
#	Copyright © 2017-2020. EarthWalk Software
#	Licensed under the GNU General Public License, GPL-3.0-or-later.
#
#   This file is part of ewsdocker/ldc-library.
#
#   ewsdocker/ldc-library is free software: you can redistribute 
#   it and/or modify it under the terms of the GNU General Public License 
#   as published by the Free Software Foundation, either version 3 of the 
#   License, or (at your option) any later version.
#
#   ewsdocker/ldc-library is distributed in the hope that it will 
#   be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
#   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ewsdocker/ldc-library.  If not, see 
#   <http://www.gnu.org/licenses/>.
#
#
# =========================================================================================
# =========================================================================================

# =========================================================================================
#
#    Dependencies: 
#		ldcDeclare.lib (for ldcDeclareStr)
#       ldcCli.lib 
#
# =========================================================================================

# =========================================================================================
#
#    Command line parameter input parsing
#
# =========================================================================================

#declare -A cliParam=()
#declare -a cliKey=()

#declare -a cliBuffer=( "${@}" )

# =========================================================================================
#
#    ldcStrUnquote
#
#	remove leading and trailing quotes
#
#	parameters:
#	    string = the string to unquote
#	    result = (optional) location to place the unquoted string
#    Result:
#        0 = no error
#        non-zero = error number
#
# =========================================================================================
function ldcStrUnquote()
{
	local quoted=${1}

	strUnquoted="${quoted%\"}"
	strUnquoted="${strUnquoted#\"}"

	[[ -n "$2" ]] &&
	{
	    ldcDeclareStr $2 "${strUnquoted}"
	    [[ $? -eq 0 ]] || return 1
	}

	return 0
}

# =========================================================================================
#
#	ldcStrExplode
#
#		explodes a string into an array of lines split at the specified seperator
#
#	attributes:
#		string = string to explode
#		separator = (optional) parameter separator, defaults to ' '
#		array =  location (array name) to copy the exploded data
#    Result:
#        0 = no error
#        non-zero = error number
#
# =========================================================================================
function ldcStrExplode()
{
	local string="${1}"
	local separator=${2:-" "}

	local OIFS="$IFS"
	IFS=$separator

	    read -a ${3} <<< "${string}"

	IFS="$OIFS"
}

# =========================================================================================
#
#	ldcStrSplit
#
#	    Splits a string into name and value at the specified seperator character
#
#	attributes:
#	    string = string to split
#	    parameter = parameter name
#	    value = parameter value
#	    separator = (optional) parameter-value separator, defaults to '='
#    Result:
#        0 = no error
#        non-zero = error number
#
# =========================================================================================
function ldcStrSplit()
{
    local -a nv=()

    ldcStrExplode "${1}" ${4:-"="} nv

    ldcDeclareStr ${2} "${nv[0]}"
    [[ $? -eq 0 ]] || return 1

    ldcDeclareStr ${3} "${nv[1]}"
    [[ $? -eq 0 ]] || return 2

    return 0
}

# *********************************************************************************
#
#	ldcSplitParameter
#
#	    Splits the parameter string into name and value
#
#	parameters:
#	    parameter = parameter string
#    Result:
#        0 = no error
#        non-zero = error number
#
# *********************************************************************************
function ldcSplitParameter()
{
    [[ -z "${1}" ]] && return 1

    ldcStrSplit "${1}" pName pValue
    [[ $? -eq 0 ]] || return 2

    cliParam[${pName}]=${pValue}
    cliKey[${#cliKey[@]}]=${pName}

    return 0
}

# **************************************************************************
#
#	ldcCliParse
#
#        Parse the global cli buffer (cliBuffer) 
#           into the global parameter array (cliParam)
#
#	parameters:
#	    none
#    Result:
#        0 = no error
#        non-zero = error number
#
# **************************************************************************
function ldcCliParse()
{
    [[ ${#cliBuffer[*]} -eq 0 ]] && return 0

    local pString

    for pString in "${cliBuffer[@]}"
    do
        ldcSplitParameter "${pString}"
		[[ $? -eq 0 ]] || return 1
    done

    return 0
}

