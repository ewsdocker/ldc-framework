# *********************************************************************************
# *********************************************************************************
#
#   ldcNs.lib
#
#		Declare and manage namespaces (manually)
$
#		NOTE
#			This is a very pedantic and thin implementation
#
# *****************************************************************************
#
# @author Jay Wheeler.
# @version 0.0.1
# @copyright © 2021. EarthWalk Software.
# @license Licensed under the Academic Free License version 3.0
# @package ewsdocker/ldc-library
# @subpackage ldcNs
#
# *****************************************************************************
#
#	Copyright © 2021. EarthWalk Software
#	Licensed under the GNU General Public License, GPL-3.0-or-later.
#
#   This file is part of ewsdocker/ldc-library.
#
#   ewsdocker/ldc-library is free software: you can redistribute 
#   it and/or modify it under the terms of the GNU General Public License 
#   as published by the Free Software Foundation, either version 3 of the 
#   License, or (at your option) any later version.
#
#   ewsdocker/ldc-library is distributed in the hope that it will 
#   be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
#   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ewsdocker/ldc-library.  If not, see 
#   <http://www.gnu.org/licenses/>.
#
# *****************************************************************************
#
#			Version 0.0.1 - 04-23-2021.
#
# *********************************************************************************
#
#	Dependencies
#
#		ldcDeclare.lib
#
# *********************************************************************************
# *********************************************************************************
#
#	Functions
#
#
# *********************************************************************************

declare -r ldclib_ldcNs="0.0.1"	# version of library

# *********************************************************************************
# *********************************************************************************

declare    ldcns_current=""

# *********************************************************************************
# *********************************************************************************

# *********************************************************************************
#
#	ldcNsSet
#
#		sets the value of a global variable
#
#	parameters:
#		name = name of global variable
#		value = value to set
#
#	returns:
#		0 = no error
#		1 = variable name is a number
#		2 = unable to set value
#
# *********************************************************************************
function ldcNsSet()
{
	ldcDeclareSet "$ldcns_current${1}" "${2}"
	return $?
}

# *********************************************************************************
#
#	ldcNsInt
#
#		creates a global integer variable and sets it's value
#
#	parameters:
#		name = name of global variable
#		content = value to set
#
#	returns:
#		result = 0 if set ok
#			   = 1 if set error
#
# *********************************************************************************
function ldcNsInt()
{
	[[ -z "${1}" || -z "${2}" ]] && return 1

	ldcDeclareInt "$ldcns_current${1}" "${2}"
	return $?
}

# *********************************************************************************
#
#	ldcNsStr
#
#		creates a global string variable and sets it's value
#
#	parameters:
#		name = name of global variable
#		value = value to set
#
#	returns:
#		result = 0 if set ok
#			   = 1 if set error
#
# *********************************************************************************
function ldcNsStr()
{
	[[ -z "${1}" ]] && return 1

	ldcDeclareStr "$ldcns_current${1}" "${2}"
	return $?
}

# *********************************************************************************
#
#	ldcNsPwd
#
#		creates a global string password variable and sets it's value
#
#	parameters:
#		name = name of global variable
#		value = value to set
#
#	returns:
#		result = 0 if set ok
#			   = 1 if set error
#
# *********************************************************************************
function ldcNsPwd()
{
	[[ -z "${1}" || -z "${2}" ]] && return 1

	ldcDeclarePwd "$ldcns_current${1}" "${2}"
	return $?
}

# *********************************************************************************
#
#	ldcNsAssoc
#
#		creates a global associative array variable
#
#	parameters:
#		name = name of global variable
#
#	returns:
#		result = 0 if set ok
#			   = 1 if set error
#
# *********************************************************************************
function ldcNsAssoc()
{
	[[ -z "${1}" ]] && return 1

	ldcDeclareAssoc "$ldcns_current${1}"
	return $?
}

# *********************************************************************************
#
#	ldcNsArray
#
#		creates a global array variable
#
#	parameters:
#		name = name of global variable
#
#	returns:
#		result = 0 if set ok
#			   = 1 if set error
#
# *********************************************************************************
function ldcNsArray()
{
	[[ -z "${1}" ]] && return 1

	ldcDeclareArray "$ldcns_current${1}"
	return $?
}

# *********************************************************************************
#
#	ldcNsArrayEl
#
#		Adds an element to a (global) associative array variable
#
#	parameters:
#		parent = global array variable
#		name = element name or index number
#		value = value to set
#
#	returns:
#		0 = no error
#		non-zero = error code
#
# *********************************************************************************
function ldcNsArrayEl()
{
	[[ -z "${1}" || -z "${2}" ]] && return 1

	ldcDeclareArrayEl "$ldcns_current${1}" "${2}" "${3}"
	return $?
}

# *********************************************************************************
#
#	ldcNsGetName
#
#	parameters:
#		name = global name (with no namespace)
#       nsName = store namespace variable name here
#
#	returns:
#		result = 0 if set ok
#			   = 1 if set error
#
# *********************************************************************************
function ldcNsGetName()
{
	[[ -z "${1}" ]] && return 1

	ldcDeclareStrNs "${2}" "${ldcns_current}${1}"
	return $?
}

# *********************************************************************************
#
#	ldcNsGetValue
#
#	parameters:
#		name = global name (with no namespace)
#       nsName = store namespace variable value here
#
#	returns:
#		result = 0 if set ok
#			   = 1 if set error
#
# *********************************************************************************
function ldcNsGetValue()
{
	[[ -z "${1}" ]] && return 1

	eval "${2}='${ldcns_current}${1}'"
	return $?
}

# *********************************************************************************
#
#	ldcNs
#		Declare and make current the specifiec namespace
#
#	parameters:
#		ns = namespace to select
#
#	returns:
#		result = 0 if set ok
#			   = 1 if set error
#
# *********************************************************************************
function ldcNs()
{
	[[ -z "${1}" ]] && return 1

	ldcns_current=${1:-""}
	return 0
}

# *********************************************************************************
# *********************************************************************************

