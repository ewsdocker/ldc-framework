# =========================================================================================
# =========================================================================================
#
#	lmsErrorMsg - error messages 
#
# =========================================================================================
#
# @author Jay Wheeler.
# @version 0.1.0
# @copyright © 2020-2021. EarthWalk Software.
# @license Licensed under the GNU General Public License, GPL-3.0-or-later.
# @package ewsdocker/ldc-library
# @subpackage lmsErrorMsg.lib
#
# =========================================================================
#
#	Copyright © 2020-2021. EarthWalk Software
#	Licensed under the GNU General Public License, GPL-3.0-or-later.
#
#   This file is part of ewsdocker/ldc-library.
#
#   ewsdocker/ldc-library is free software: you can redistribute 
#   it and/or modify it under the terms of the GNU General Public License 
#   as published by the Free Software Foundation, either version 3 of the 
#   License, or (at your option) any later version.
#
#   ewsdocker/ldc-library is distributed in the hope that it will 
#   be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
#   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ewsdocker/ldc-library.  If not, see 
#   <http://www.gnu.org/licenses/>.
#
# =========================================================================================
# =========================================================================================

# =========================================================================================
#
#    Dependencies:
#       lmsDeclare.lib
#		lmsStr.lib
#
# =========================================================================================

declare -A lmsErrorMessages=(["none"]="No error has occurred."
                             ["unknown"]="An unknown error has occurred."
                             )

declare -a lmsErrorCodes=("none"
                          "unknown"
                          )

declare    lmsError_name="none"
declare    lmsError_message="${lmsErrorMessages[$lmsError_name]}"
declare -i lmsError_code=0

# =========================================================================================
#
#    lmsErrorExists - check if requested errorName exists
#
#    Parameters:
#		errorName = name of the error message
#
#    Results:
#       0 = found
#       1 = not found
#
# =========================================================================================
function lmsErrorExists()
{
	local errorName="${1}"

	[[ -z "${errorName}" ]] && errorName="unknown"
	[[ "${lmsErrorCodes[@]}" =~ "${errorName}" ]] || return 1

	return 0
}

# =========================================================================================
#
#    lmsErrorAdd - add a new error name and message to lmsErrorMessages
#
#    Parameters:
#		errorName = name of the error message
#       errorMsg  = error message text
#
#    Results:
#       0 = no error
#
# =========================================================================================
function lmsErrorAdd()
{
    local errorName=${1:-"unknown"}
    local errorMsg=${2:-"An unknown error has occurred."}

    lmsErrorExists "${errorName}"
    [[ $? -eq 0 ]] || lmsErrorCodes[${#lmsErrorCodes[*]}]="${errorName}"

    lmsErrorMessages["${errorName}"]="${errorMsg}"
}

# =========================================================================================
#
#    lmsErrorCode - return the error code for the given error name
#
#    Parameters:
#		errorName = name of the error message
#       errorCode = name of the global variable to receive the code number
#
#    Results:
#       lmsError_code as an integer
#
# =========================================================================================
function lmsErrorCode()
{
    local errorName=${1:-"$lmsError_name"}
    local errorCode=${2:-""}

    lmsErrorExists "${errorName}"
    [[ $? -eq 0 ]] || errorName="unknown"

	local index=0
	local fence=${#lmsErrorCodes[*]}

	while [[ true ]]
	do
		[[ "${lmsErrorCodes[$index]}" == "${errorName}" ]] && break

		(( index++ ))
        [[ ${index} -ge ${fence} ]] && 
         {
         	index=0
            lmsError_name="none"
            lmsError_message=${lmsErrorMessages["none"]}

         	break
         }
	done

	lmsDeclareInt ${errorCode} ${index}

	return ${index}
}

# =========================================================================================
#
#    lmsErrorGet - set global error name, error number and error message
#                          from error name
#
#    Parameters:
#		errorName = name of the error message
#		errorMessage = destination of the message (optional, default = $lmsError_message)
#
#    Results:
#       0 = no error
#
# =========================================================================================
function lmsErrorGet()
{
    local errorName=${1:-"$lmsError_name"}
    local errorBuffer=${2:-"lmsError_message"}

    lmsErrorExists "${errorName}"
    [[ $? -eq 0 ]] || errorName="unknown" 

    lmsError_name="${errorName}"
    lmsError_message=${lmsErrorMessages["$errorName"]}

	lmsDeclareStr ${errorBuffer} "${lmsError_message}"
}

# =========================================================================================
#
#    lmsErrorSet - set global error name and message
#
#    Parameters:
#		errorName = name of the error message
#
#    Results:
#       0 = no error
#
# =========================================================================================
function lmsErrorSet()
{
    local errorName=${1:-"unknown"}

    lmsErrorExists "${errorName}"
    [[ $? -eq 0 ]] || errorName="unknown" 

    lmsError_name="${errorName}"
    lmsError_message=${lmsErrorMessages["$errorName"]}

	lmsErrorCode $lmsError_name

	return $lmsError_code
}

# =========================================================================================

